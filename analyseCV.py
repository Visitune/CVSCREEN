# Analyse de CV GFSI avec r√©f√©rentiels structur√©s et exemples
import streamlit as st
import PyPDF2
import json
from datetime import datetime
from pathlib import Path
import groq
import pandas as pd
import plotly.graph_objects as go

st.set_page_config(page_title="Analyse de CV GFSI", layout="wide")
st.title("üìÑ Analyse comparative de CV - Auditeurs GFSI")

def afficher_jauge(titre, valeur):
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=valeur * 100,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': titre},
        gauge={
            'axis': {'range': [0, 100]},
            'bar': {'color': "green" if valeur >= 0.75 else "orange" if valeur >= 0.5 else "red"},
            'steps': [
                {'range': [0, 50], 'color': "#f8d7da"},
                {'range': [50, 75], 'color': "#fff3cd"},
                {'range': [75, 100], 'color': "#d4edda"}
            ]
        }
    ))
    fig.update_layout(height=300)
    st.plotly_chart(fig, use_container_width=True)

def extract_valid_json(text):
    decoder = json.JSONDecoder()
    text = text.strip()
    for i in range(len(text)):
        try:
            obj, _ = decoder.raw_decode(text[i:])
            return obj
        except json.JSONDecodeError:
            continue
    return None

def create_example_referential():
    """Cr√©e un exemple de r√©f√©rentiel structur√©"""
    example = {
        "metadata": {
            "name": "GFSI - Auditeur Senior",
            "version": "1.0",
            "description": "R√©f√©rentiel pour auditeurs seniors GFSI",
            "date_creation": "2024-01-01"
        },
        "categories": {
            "formation": {
                "name": "Formation et Certification",
                "weight": 0.3,
                "description": "Formations acad√©miques et certifications professionnelles"
            },
            "experience": {
                "name": "Exp√©rience Professionnelle", 
                "weight": 0.4,
                "description": "Exp√©rience pratique en audit et s√©curit√© alimentaire"
            },
            "competences": {
                "name": "Comp√©tences Techniques",
                "weight": 0.2,
                "description": "Ma√Ætrise des standards et outils d'audit"
            },
            "langues": {
                "name": "Comp√©tences Linguistiques",
                "weight": 0.1,
                "description": "Capacit√©s de communication internationale"
            }
        },
        "exigences": {
            "FORM_001": {
                "id": "FORM_001",
                "category": "formation",
                "title": "Formation sup√©rieure en s√©curit√© alimentaire",
                "description": "Dipl√¥me Bac+5 minimum en sciences alimentaires, microbiologie, ou √©quivalent",
                "criteres": [
                    "Dipl√¥me universitaire niveau Master (Bac+5) minimum",
                    "Sp√©cialisation en s√©curit√© alimentaire, microbiologie, ou domaine connexe",
                    "Formation continue en normes GFSI"
                ],
                "exemples_conformes": [
                    "Master en Sciences Alimentaires - Universit√© de Lyon",
                    "Ing√©nieur Agronome sp√©cialit√© S√©curit√© Alimentaire - AgroParisTech",
                    "PhD en Microbiologie Alimentaire + formations GFSI"
                ],
                "exemples_non_conformes": [
                    "BTS Agroalimentaire uniquement",
                    "Licence en biologie sans sp√©cialisation",
                    "Formation courte en audit sans dipl√¥me sup√©rieur"
                ],
                "niveau_requis": "obligatoire",
                "ponderation": 1.0
            },
            "EXP_001": {
                "id": "EXP_001", 
                "category": "experience",
                "title": "Exp√©rience minimum en audit GFSI",
                "description": "Au moins 5 ans d'exp√©rience en audit de syst√®mes de management s√©curit√© alimentaire",
                "criteres": [
                    "Minimum 5 ann√©es d'exp√©rience en audit",
                    "Exp√©rience dans au moins 2 standards GFSI diff√©rents",
                    "Participation √† minimum 50 audits document√©s"
                ],
                "exemples_conformes": [
                    "7 ans d'exp√©rience - Lead Auditor BRC et IFS",
                    "Auditeur senior FSSC 22000 - 120 audits r√©alis√©s",
                    "10 ans audit SQF + formations continues"
                ],
                "exemples_non_conformes": [
                    "3 ans d'exp√©rience uniquement en qualit√©",
                    "Exp√©rience audit ISO 9001 sans s√©curit√© alimentaire",
                    "Formation th√©orique sans pratique terrain"
                ],
                "niveau_requis": "obligatoire",
                "ponderation": 1.0
            },
            "COMP_001": {
                "id": "COMP_001",
                "category": "competences", 
                "title": "Ma√Ætrise des standards GFSI",
                "description": "Connaissance approfondie d'au moins 2 standards GFSI reconnus",
                "criteres": [
                    "Certification dans au moins 2 standards GFSI",
                    "Connaissance des √©volutions r√©glementaires",
                    "Capacit√© √† interpr√©ter les non-conformit√©s"
                ],
                "exemples_conformes": [
                    "Certifi√© Lead Auditor BRC + IFS",
                    "Expert FSSC 22000 + SQF Level 2",
                    "Formateur agr√©√© standards GFSI"
                ],
                "exemples_non_conformes": [
                    "Connaissance th√©orique uniquement",
                    "Certification dans un seul standard",
                    "Pas de mise √† jour des certifications"
                ],
                "niveau_requis": "recommande",
                "ponderation": 0.8
            },
            "LANG_001": {
                "id": "LANG_001",
                "category": "langues",
                "title": "Comp√©tences linguistiques internationales", 
                "description": "Ma√Ætrise de l'anglais professionnel + une langue additionnelle",
                "criteres": [
                    "Anglais professionnel niveau C1 minimum",
                    "Capacit√© √† r√©diger des rapports d'audit en anglais",
                    "Une langue europ√©enne additionnelle appr√©ci√©e"
                ],
                "exemples_conformes": [
                    "Anglais courant + Allemand interm√©diaire",
                    "Bilingue fran√ßais/anglais + notions espagnol",
                    "Certifications TOEIC 900+ ou √©quivalent"
                ],
                "exemples_non_conformes": [
                    "Anglais scolaire uniquement",
                    "Pas de pratique professionnelle de l'anglais",
                    "Monolingue fran√ßais"
                ],
                "niveau_requis": "souhaitable",
                "ponderation": 0.6
            }
        }
    }
    return example

# Sidebar config
with st.sidebar:
    st.header("üîß Configuration")
    api_key = st.text_input("üîë Cl√© API Groq :", type="password")
    
    # Bouton pour cr√©er un exemple de r√©f√©rentiel
    if st.button("üìù Cr√©er un r√©f√©rentiel d'exemple"):
        ref_dir = Path("referentiels")
        ref_dir.mkdir(exist_ok=True)
        example_ref = create_example_referential()
        with open(ref_dir / "exemple_auditeur_senior.json", "w", encoding="utf-8") as f:
            json.dump(example_ref, f, indent=2, ensure_ascii=False)
        st.success("‚úÖ R√©f√©rentiel d'exemple cr√©√© dans /referentiels/")
    
    if not api_key:
        st.warning("Veuillez saisir une cl√© API valide.")
        st.stop()

    client = groq.Client(api_key=api_key)

    @st.cache_data
    def load_referentials():
        referentials = {}
        ref_dir = Path("referentiels")
        if ref_dir.exists():
            for file in ref_dir.glob("*.json"):
                try:
                    with open(file, encoding="utf-8") as f:
                        data = json.load(f)
                        # Validation de la structure
                        if "exigences" in data:
                            referentials[file.stem] = data
                        else:
                            st.warning(f"‚ö†Ô∏è Structure invalide pour {file.name}")
                except Exception as e:
                    st.error(f"‚ùå Erreur lecture {file.name}: {e}")
        return referentials

    referentials = load_referentials()
    if not referentials:
        st.error("Aucun r√©f√©rentiel valide trouv√©. Cr√©ez d'abord un r√©f√©rentiel d'exemple.")
        st.stop()

    ref_name = st.selectbox("üìö R√©f√©rentiel GFSI :", list(referentials.keys()))
    selected_ref = referentials[ref_name]
    
    # Affichage des m√©tadonn√©es du r√©f√©rentiel
    if "metadata" in selected_ref:
        metadata = selected_ref["metadata"]
        st.info(f"**{metadata.get('name', 'Sans nom')}**\n\n{metadata.get('description', '')}")
        st.caption(f"Version: {metadata.get('version', 'N/A')} | Date: {metadata.get('date_creation', 'N/A')}")

    model = st.selectbox("üß† Mod√®le IA :", [
        "llama3-8b-8192", "llama-3.3-70b-versatile", "llama-3.1-8b-instant", "kmi-k2-70b", "qwen3-72b"
    ])

# Affichage du r√©f√©rentiel s√©lectionn√©
if selected_ref and st.expander("üëÅÔ∏è Aper√ßu du r√©f√©rentiel s√©lectionn√©"):
    if "categories" in selected_ref:
        st.subheader("üìã Cat√©gories d'exigences")
        for cat_id, cat_info in selected_ref["categories"].items():
            st.write(f"**{cat_info['name']}** (poids: {cat_info['weight']}) - {cat_info['description']}")
    
    if "exigences" in selected_ref:
        st.subheader("üìù Exigences d√©taill√©es")
        for req_id, req_info in selected_ref["exigences"].items():
            with st.expander(f"{req_id}: {req_info['title']}"):
                st.write(f"**Description:** {req_info['description']}")
                st.write(f"**Niveau:** {req_info['niveau_requis']} | **Pond√©ration:** {req_info['ponderation']}")
                
                st.write("**Crit√®res:**")
                for critere in req_info.get("criteres", []):
                    st.write(f"‚Ä¢ {critere}")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.write("‚úÖ **Exemples conformes:**")
                    for ex in req_info.get("exemples_conformes", []):
                        st.write(f"‚Ä¢ {ex}")
                
                with col2:
                    st.write("‚ùå **Exemples non conformes:**")
                    for ex in req_info.get("exemples_non_conformes", []):
                        st.write(f"‚Ä¢ {ex}")

# Fichiers PDF
uploaded_files = st.file_uploader("üìÑ Chargez un ou plusieurs CV (PDF uniquement)", type=["pdf"], accept_multiple_files=True)

if uploaded_files and st.button("üîç Lancer l'analyse IA"):
    results_all = []
    details_export = []

    with st.spinner("Analyse des CV en cours..."):
        for uploaded_file in uploaded_files:
            try:
                uploaded_file.seek(0)
                reader = PyPDF2.PdfReader(uploaded_file)
                cv_text = " ".join([page.extract_text() or "" for page in reader.pages])

                # Construction du prompt enrichi avec exemples
                exigences_detail = ""
                for req_id, req_info in selected_ref["exigences"].items():
                    exigences_detail += f"""
EXIGENCE {req_id}: {req_info['title']}
Description: {req_info['description']}
Niveau: {req_info['niveau_requis']} | Pond√©ration: {req_info['ponderation']}

Crit√®res d'√©valuation:
{chr(10).join(['‚Ä¢ ' + c for c in req_info.get('criteres', [])])}

Exemples CONFORMES (√† rechercher dans le CV):
{chr(10).join(['‚Ä¢ ' + ex for ex in req_info.get('exemples_conformes', [])])}

Exemples NON CONFORMES (√©l√©ments insuffisants):
{chr(10).join(['‚Ä¢ ' + ex for ex in req_info.get('exemples_non_conformes', [])])}
---"""

                prompt = f"""
Tu es un expert en conformit√© GFSI avec 15 ans d'exp√©rience.
Analyse le CV ci-dessous en √©valuant CHAQUE EXIGENCE du r√©f√©rentiel.

M√âTHODOLOGIE D'ANALYSE:
1. Pour chaque exigence, recherche dans le CV les √©l√©ments correspondant aux crit√®res
2. Compare avec les exemples conformes/non conformes fournis
3. Attribue un statut: ‚úÖ CONFORME, ‚ö†Ô∏è √Ä CHALLENGER, ou ‚ùå NON CONFORME
4. Justifie ta d√©cision en citant les √©l√©ments pr√©cis du CV
5. Indique un score de confiance (0 √† 1) bas√© sur la clart√© des informations

R√âF√âRENTIEL D√âTAILL√â:
{exigences_detail}

CV DU CANDIDAT √Ä ANALYSER:
{cv_text}

IMPORTANT: Base-toi uniquement sur les informations pr√©sentes dans le CV. Si une information n'est pas claire ou absente, marque comme "√Ä CHALLENGER".

R√©pond UNIQUEMENT avec un objet JSON strictement valide :
{{
  "analysis": [
    {{
      "exigence_id": "FORM_001",
      "exigence_titre": "Formation sup√©rieure en s√©curit√© alimentaire",
      "statut": "CONFORME / √Ä CHALLENGER / NON CONFORME",
      "justification": "justification pr√©cise bas√©e sur les √©l√©ments du CV",
      "elements_cv": "citation exacte des √©l√©ments pertinents du CV",
      "confiance": 0.85,
      "niveau_requis": "obligatoire",
      "ponderation": 1.0
    }}
  ],
  "score_global": 0.75,
  "synthese": "r√©sum√© des points forts et points d'attention avec recommandations actionables"
}}
"""

                response = client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.1,
                    max_tokens=4000
                )

                result = response.choices[0].message.content.strip()
                result_data = extract_valid_json(result)
                if not result_data:
                    st.error(f"‚ö†Ô∏è JSON invalide pour {uploaded_file.name}")
                    continue

                analysis = result_data.get("analysis", [])
                for a in analysis:
                    a["cv"] = uploaded_file.name
                    details_export.append(a)

                # Calculs avec pond√©ration
                score_pondere = 0
                poids_total = 0
                conformes = challengers = non_conformes = 0
                
                for item in analysis:
                    statut = item.get("statut", "").upper()
                    ponderation = item.get("ponderation", 1.0)
                    confiance = item.get("confiance", 0)
                    
                    if statut == "CONFORME":
                        conformes += 1
                        score_pondere += confiance * ponderation
                    elif "CHALLENGER" in statut:
                        challengers += 1
                        score_pondere += (confiance * 0.5) * ponderation
                    else:
                        non_conformes += 1
                    
                    poids_total += ponderation

                score_final = score_pondere / poids_total if poids_total > 0 else 0

                results_all.append({
                    "nom": uploaded_file.name,
                    "conformes": conformes,
                    "challengers": challengers,
                    "non_conformes": non_conformes,
                    "score": round(score_final, 2),
                    "score_global": result_data.get("score_global", score_final),
                    "details": analysis,
                    "synthese": result_data.get("synthese", "")
                })

            except Exception as e:
                st.error(f"‚ùå Erreur pour {uploaded_file.name} : {e}")

    # Affichage des r√©sultats am√©lior√©
    if results_all:
        # Tableau comparatif
        st.subheader("üìä Comparaison des candidats")
        comparison_df = pd.DataFrame([{
            "Candidat": r["nom"],
            "Score Global": f"{r['score']:.0%}",
            "‚úÖ Conformes": r["conformes"],
            "‚ö†Ô∏è √Ä challenger": r["challengers"], 
            "‚ùå Non conformes": r["non_conformes"]
        } for r in results_all])
        st.dataframe(comparison_df, use_container_width=True)

        # D√©tails par candidat
        for result in results_all:
            st.subheader(f"üìÑ Analyse d√©taill√©e : {result['nom']}")
            
            # Score global avec jauge
            col1, col2 = st.columns([1, 2])
            with col1:
                afficher_jauge("Score Global", result["score"])
            with col2:
                st.markdown("### üß† Synth√®se IA")
                st.info(result["synthese"])

            # D√©tail par cat√©gorie
            df = pd.DataFrame(result["details"])
            if "categories" in selected_ref:
                st.markdown("### üìã Analyse par cat√©gorie")
                for cat_id, cat_info in selected_ref["categories"].items():
                    cat_exigences = df[df["exigence_id"].str.startswith(cat_id.upper()[:4])]
                    if not cat_exigences.empty:
                        with st.expander(f"{cat_info['name']} ({len(cat_exigences)} exigences)"):
                            for _, row in cat_exigences.iterrows():
                                status_emoji = {"CONFORME": "‚úÖ", "√Ä CHALLENGER": "‚ö†Ô∏è", "NON CONFORME": "‚ùå"}
                                emoji = status_emoji.get(row["statut"], "‚ùì")
                                
                                st.write(f"{emoji} **{row['exigence_titre']}**")
                                st.write(f"*Justification:* {row['justification']}")
                                if row.get('elements_cv'):
                                    st.write(f"*√âl√©ments du CV:* {row['elements_cv']}")
                                st.write(f"*Confiance:* {row['confiance']:.0%}")
                                st.divider()

        # Export des r√©sultats
        if st.button("üì• Exporter les r√©sultats d√©taill√©s"):
            export_df = pd.DataFrame(details_export)
            csv = export_df.to_csv(index=False, encoding="utf-8")
            st.download_button(
                label="üíæ T√©l√©charger CSV", 
                data=csv, 
                file_name=f"analyse_cv_gfsi_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                mime="text/csv"
            )

# Instructions d'utilisation
with st.expander("üìö Structure du r√©f√©rentiel JSON"):
    st.code("""
{
  "metadata": {
    "name": "Nom du r√©f√©rentiel",
    "version": "1.0", 
    "description": "Description du r√©f√©rentiel",
    "date_creation": "2024-01-01"
  },
  "categories": {
    "formation": {
      "name": "Formation et Certification",
      "weight": 0.3,
      "description": "Description de la cat√©gorie"
    }
  },
  "exigences": {
    "FORM_001": {
      "id": "FORM_001",
      "category": "formation",
      "title": "Titre de l'exigence",
      "description": "Description d√©taill√©e",
      "criteres": ["Crit√®re 1", "Crit√®re 2"],
      "exemples_conformes": ["Exemple 1", "Exemple 2"],
      "exemples_non_conformes": ["Contre-exemple 1"],
      "niveau_requis": "obligatoire|recommande|souhaitable",
      "ponderation": 1.0
    }
  }
}
    """, language="json")
